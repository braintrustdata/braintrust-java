// File generated from our OpenAPI spec by Stainless.

package com.braintrustdata.api.models

import com.braintrustdata.api.core.Enum
import com.braintrustdata.api.core.ExcludeMissing
import com.braintrustdata.api.core.JsonField
import com.braintrustdata.api.core.JsonMissing
import com.braintrustdata.api.core.JsonValue
import com.braintrustdata.api.core.NoAutoDetect
import com.braintrustdata.api.core.toImmutable
import com.braintrustdata.api.errors.BraintrustInvalidDataException
import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import java.time.OffsetDateTime
import java.util.Objects
import java.util.Optional

@JsonDeserialize(builder = ExperimentEvent.Builder::class)
@NoAutoDetect
class ExperimentEvent
private constructor(
    private val id: JsonField<String>,
    private val datasetRecordId: JsonField<String>,
    private val _xactId: JsonField<String>,
    private val created: JsonField<OffsetDateTime>,
    private val projectId: JsonField<String>,
    private val experimentId: JsonField<String>,
    private val input: JsonValue,
    private val output: JsonValue,
    private val expected: JsonValue,
    private val error: JsonValue,
    private val scores: JsonField<Scores>,
    private val metadata: JsonField<Metadata>,
    private val tags: JsonField<List<String>>,
    private val metrics: JsonField<Metrics>,
    private val context: JsonField<Context>,
    private val spanId: JsonField<String>,
    private val spanParents: JsonField<List<String>>,
    private val rootSpanId: JsonField<String>,
    private val spanAttributes: JsonField<SpanAttributes>,
    private val isRoot: JsonField<Boolean>,
    private val origin: JsonField<Origin>,
    private val additionalProperties: Map<String, JsonValue>,
) {

    private var validated: Boolean = false

    /**
     * A unique identifier for the experiment event. If you don't provide one, BrainTrust will
     * generate one for you
     */
    fun id(): String = id.getRequired("id")

    /**
     * If the experiment is associated to a dataset, this is the event-level dataset id this
     * experiment event is tied to
     */
    fun datasetRecordId(): Optional<String> =
        Optional.ofNullable(datasetRecordId.getNullable("dataset_record_id"))

    /**
     * The transaction id of an event is unique to the network operation that processed the event
     * insertion. Transaction ids are monotonically increasing over time and can be used to retrieve
     * a versioned snapshot of the experiment (see the `version` parameter)
     */
    fun _xactId(): String = _xactId.getRequired("_xact_id")

    /** The timestamp the experiment event was created */
    fun created(): OffsetDateTime = created.getRequired("created")

    /** Unique identifier for the project that the experiment belongs under */
    fun projectId(): String = projectId.getRequired("project_id")

    /** Unique identifier for the experiment */
    fun experimentId(): String = experimentId.getRequired("experiment_id")

    /**
     * The arguments that uniquely define a test case (an arbitrary, JSON serializable object).
     * Later on, Braintrust will use the `input` to know whether two test cases are the same between
     * experiments, so they should not contain experiment-specific state. A simple rule of thumb is
     * that if you run the same experiment twice, the `input` should be identical
     */
    fun input(): JsonValue = input

    /**
     * The output of your application, including post-processing (an arbitrary, JSON serializable
     * object), that allows you to determine whether the result is correct or not. For example, in
     * an app that generates SQL queries, the `output` should be the _result_ of the SQL query
     * generated by the model, not the query itself, because there may be multiple valid queries
     * that answer a single question
     */
    fun output(): JsonValue = output

    /**
     * The ground truth value (an arbitrary, JSON serializable object) that you'd compare to
     * `output` to determine if your `output` value is correct or not. Braintrust currently does not
     * compare `output` to `expected` for you, since there are so many different ways to do that
     * correctly. Instead, these values are just used to help you navigate your experiments while
     * digging into analyses. However, we may later use these values to re-score outputs or
     * fine-tune your models
     */
    fun expected(): JsonValue = expected

    /** The error that occurred, if any. */
    fun error(): JsonValue = error

    /**
     * A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety
     * of signals that help you determine how accurate the outputs are compared to what you expect
     * and diagnose failures. For example, a summarization app might have one score that tells you
     * how accurate the summary is, and another that measures the word similarity between the
     * generated and grouth truth summary. The word similarity score could help you determine
     * whether the summarization was covering similar concepts or not. You can use these scores to
     * help you sort, filter, and compare experiments
     */
    fun scores(): Optional<Scores> = Optional.ofNullable(scores.getNullable("scores"))

    /**
     * A dictionary with additional data about the test example, model outputs, or just about
     * anything else that's relevant, that you can use to help find and analyze examples later. For
     * example, you could log the `prompt`, example's `id`, or anything else that would be useful to
     * slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys
     * must be strings
     */
    fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

    /** A list of tags to log */
    fun tags(): Optional<List<String>> = Optional.ofNullable(tags.getNullable("tags"))

    /**
     * Metrics are numerical measurements tracking the execution of the code that produced the
     * experiment event. Use "start" and "end" to track the time span over which the experiment
     * event was produced
     */
    fun metrics(): Optional<Metrics> = Optional.ofNullable(metrics.getNullable("metrics"))

    /**
     * Context is additional information about the code that produced the experiment event. It is
     * essentially the textual counterpart to `metrics`. Use the `caller_*` attributes to track the
     * location in code which produced the experiment event
     */
    fun context(): Optional<Context> = Optional.ofNullable(context.getNullable("context"))

    /**
     * A unique identifier used to link different experiment events together as part of a full
     * trace. See the [tracing guide](https://www.braintrust.dev/docs/guides/tracing) for full
     * details on tracing
     */
    fun spanId(): String = spanId.getRequired("span_id")

    /**
     * An array of the parent `span_ids` of this experiment event. This should be empty for the root
     * span of a trace, and should most often contain just one parent element for subspans
     */
    fun spanParents(): Optional<List<String>> =
        Optional.ofNullable(spanParents.getNullable("span_parents"))

    /** A unique identifier for the trace this experiment event belongs to */
    fun rootSpanId(): String = rootSpanId.getRequired("root_span_id")

    /** Human-identifying attributes of the span, such as name, type, etc. */
    fun spanAttributes(): Optional<SpanAttributes> =
        Optional.ofNullable(spanAttributes.getNullable("span_attributes"))

    /** Whether this span is a root span */
    fun isRoot(): Optional<Boolean> = Optional.ofNullable(isRoot.getNullable("is_root"))

    /** Indicates the event was copied from another object. */
    fun origin(): Optional<Origin> = Optional.ofNullable(origin.getNullable("origin"))

    /**
     * A unique identifier for the experiment event. If you don't provide one, BrainTrust will
     * generate one for you
     */
    @JsonProperty("id") @ExcludeMissing fun _id() = id

    /**
     * If the experiment is associated to a dataset, this is the event-level dataset id this
     * experiment event is tied to
     */
    @JsonProperty("dataset_record_id") @ExcludeMissing fun _datasetRecordId() = datasetRecordId

    /**
     * The transaction id of an event is unique to the network operation that processed the event
     * insertion. Transaction ids are monotonically increasing over time and can be used to retrieve
     * a versioned snapshot of the experiment (see the `version` parameter)
     */
    @JsonProperty("_xact_id") @ExcludeMissing fun __xactId() = _xactId

    /** The timestamp the experiment event was created */
    @JsonProperty("created") @ExcludeMissing fun _created() = created

    /** Unique identifier for the project that the experiment belongs under */
    @JsonProperty("project_id") @ExcludeMissing fun _projectId() = projectId

    /** Unique identifier for the experiment */
    @JsonProperty("experiment_id") @ExcludeMissing fun _experimentId() = experimentId

    /**
     * The arguments that uniquely define a test case (an arbitrary, JSON serializable object).
     * Later on, Braintrust will use the `input` to know whether two test cases are the same between
     * experiments, so they should not contain experiment-specific state. A simple rule of thumb is
     * that if you run the same experiment twice, the `input` should be identical
     */
    @JsonProperty("input") @ExcludeMissing fun _input() = input

    /**
     * The output of your application, including post-processing (an arbitrary, JSON serializable
     * object), that allows you to determine whether the result is correct or not. For example, in
     * an app that generates SQL queries, the `output` should be the _result_ of the SQL query
     * generated by the model, not the query itself, because there may be multiple valid queries
     * that answer a single question
     */
    @JsonProperty("output") @ExcludeMissing fun _output() = output

    /**
     * The ground truth value (an arbitrary, JSON serializable object) that you'd compare to
     * `output` to determine if your `output` value is correct or not. Braintrust currently does not
     * compare `output` to `expected` for you, since there are so many different ways to do that
     * correctly. Instead, these values are just used to help you navigate your experiments while
     * digging into analyses. However, we may later use these values to re-score outputs or
     * fine-tune your models
     */
    @JsonProperty("expected") @ExcludeMissing fun _expected() = expected

    /** The error that occurred, if any. */
    @JsonProperty("error") @ExcludeMissing fun _error() = error

    /**
     * A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety
     * of signals that help you determine how accurate the outputs are compared to what you expect
     * and diagnose failures. For example, a summarization app might have one score that tells you
     * how accurate the summary is, and another that measures the word similarity between the
     * generated and grouth truth summary. The word similarity score could help you determine
     * whether the summarization was covering similar concepts or not. You can use these scores to
     * help you sort, filter, and compare experiments
     */
    @JsonProperty("scores") @ExcludeMissing fun _scores() = scores

    /**
     * A dictionary with additional data about the test example, model outputs, or just about
     * anything else that's relevant, that you can use to help find and analyze examples later. For
     * example, you could log the `prompt`, example's `id`, or anything else that would be useful to
     * slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys
     * must be strings
     */
    @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

    /** A list of tags to log */
    @JsonProperty("tags") @ExcludeMissing fun _tags() = tags

    /**
     * Metrics are numerical measurements tracking the execution of the code that produced the
     * experiment event. Use "start" and "end" to track the time span over which the experiment
     * event was produced
     */
    @JsonProperty("metrics") @ExcludeMissing fun _metrics() = metrics

    /**
     * Context is additional information about the code that produced the experiment event. It is
     * essentially the textual counterpart to `metrics`. Use the `caller_*` attributes to track the
     * location in code which produced the experiment event
     */
    @JsonProperty("context") @ExcludeMissing fun _context() = context

    /**
     * A unique identifier used to link different experiment events together as part of a full
     * trace. See the [tracing guide](https://www.braintrust.dev/docs/guides/tracing) for full
     * details on tracing
     */
    @JsonProperty("span_id") @ExcludeMissing fun _spanId() = spanId

    /**
     * An array of the parent `span_ids` of this experiment event. This should be empty for the root
     * span of a trace, and should most often contain just one parent element for subspans
     */
    @JsonProperty("span_parents") @ExcludeMissing fun _spanParents() = spanParents

    /** A unique identifier for the trace this experiment event belongs to */
    @JsonProperty("root_span_id") @ExcludeMissing fun _rootSpanId() = rootSpanId

    /** Human-identifying attributes of the span, such as name, type, etc. */
    @JsonProperty("span_attributes") @ExcludeMissing fun _spanAttributes() = spanAttributes

    /** Whether this span is a root span */
    @JsonProperty("is_root") @ExcludeMissing fun _isRoot() = isRoot

    /** Indicates the event was copied from another object. */
    @JsonProperty("origin") @ExcludeMissing fun _origin() = origin

    @JsonAnyGetter
    @ExcludeMissing
    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

    fun validate(): ExperimentEvent = apply {
        if (!validated) {
            id()
            datasetRecordId()
            _xactId()
            created()
            projectId()
            experimentId()
            input()
            output()
            expected()
            error()
            scores().map { it.validate() }
            metadata().map { it.validate() }
            tags()
            metrics().map { it.validate() }
            context().map { it.validate() }
            spanId()
            spanParents()
            rootSpanId()
            spanAttributes().map { it.validate() }
            isRoot()
            origin().map { it.validate() }
            validated = true
        }
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        @JvmStatic fun builder() = Builder()
    }

    class Builder {

        private var id: JsonField<String> = JsonMissing.of()
        private var datasetRecordId: JsonField<String> = JsonMissing.of()
        private var _xactId: JsonField<String> = JsonMissing.of()
        private var created: JsonField<OffsetDateTime> = JsonMissing.of()
        private var projectId: JsonField<String> = JsonMissing.of()
        private var experimentId: JsonField<String> = JsonMissing.of()
        private var input: JsonValue = JsonMissing.of()
        private var output: JsonValue = JsonMissing.of()
        private var expected: JsonValue = JsonMissing.of()
        private var error: JsonValue = JsonMissing.of()
        private var scores: JsonField<Scores> = JsonMissing.of()
        private var metadata: JsonField<Metadata> = JsonMissing.of()
        private var tags: JsonField<List<String>> = JsonMissing.of()
        private var metrics: JsonField<Metrics> = JsonMissing.of()
        private var context: JsonField<Context> = JsonMissing.of()
        private var spanId: JsonField<String> = JsonMissing.of()
        private var spanParents: JsonField<List<String>> = JsonMissing.of()
        private var rootSpanId: JsonField<String> = JsonMissing.of()
        private var spanAttributes: JsonField<SpanAttributes> = JsonMissing.of()
        private var isRoot: JsonField<Boolean> = JsonMissing.of()
        private var origin: JsonField<Origin> = JsonMissing.of()
        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

        @JvmSynthetic
        internal fun from(experimentEvent: ExperimentEvent) = apply {
            this.id = experimentEvent.id
            this.datasetRecordId = experimentEvent.datasetRecordId
            this._xactId = experimentEvent._xactId
            this.created = experimentEvent.created
            this.projectId = experimentEvent.projectId
            this.experimentId = experimentEvent.experimentId
            this.input = experimentEvent.input
            this.output = experimentEvent.output
            this.expected = experimentEvent.expected
            this.error = experimentEvent.error
            this.scores = experimentEvent.scores
            this.metadata = experimentEvent.metadata
            this.tags = experimentEvent.tags
            this.metrics = experimentEvent.metrics
            this.context = experimentEvent.context
            this.spanId = experimentEvent.spanId
            this.spanParents = experimentEvent.spanParents
            this.rootSpanId = experimentEvent.rootSpanId
            this.spanAttributes = experimentEvent.spanAttributes
            this.isRoot = experimentEvent.isRoot
            this.origin = experimentEvent.origin
            additionalProperties(experimentEvent.additionalProperties)
        }

        /**
         * A unique identifier for the experiment event. If you don't provide one, BrainTrust will
         * generate one for you
         */
        fun id(id: String) = id(JsonField.of(id))

        /**
         * A unique identifier for the experiment event. If you don't provide one, BrainTrust will
         * generate one for you
         */
        @JsonProperty("id") @ExcludeMissing fun id(id: JsonField<String>) = apply { this.id = id }

        /**
         * If the experiment is associated to a dataset, this is the event-level dataset id this
         * experiment event is tied to
         */
        fun datasetRecordId(datasetRecordId: String) =
            datasetRecordId(JsonField.of(datasetRecordId))

        /**
         * If the experiment is associated to a dataset, this is the event-level dataset id this
         * experiment event is tied to
         */
        @JsonProperty("dataset_record_id")
        @ExcludeMissing
        fun datasetRecordId(datasetRecordId: JsonField<String>) = apply {
            this.datasetRecordId = datasetRecordId
        }

        /**
         * The transaction id of an event is unique to the network operation that processed the
         * event insertion. Transaction ids are monotonically increasing over time and can be used
         * to retrieve a versioned snapshot of the experiment (see the `version` parameter)
         */
        fun _xactId(_xactId: String) = _xactId(JsonField.of(_xactId))

        /**
         * The transaction id of an event is unique to the network operation that processed the
         * event insertion. Transaction ids are monotonically increasing over time and can be used
         * to retrieve a versioned snapshot of the experiment (see the `version` parameter)
         */
        @JsonProperty("_xact_id")
        @ExcludeMissing
        fun _xactId(_xactId: JsonField<String>) = apply { this._xactId = _xactId }

        /** The timestamp the experiment event was created */
        fun created(created: OffsetDateTime) = created(JsonField.of(created))

        /** The timestamp the experiment event was created */
        @JsonProperty("created")
        @ExcludeMissing
        fun created(created: JsonField<OffsetDateTime>) = apply { this.created = created }

        /** Unique identifier for the project that the experiment belongs under */
        fun projectId(projectId: String) = projectId(JsonField.of(projectId))

        /** Unique identifier for the project that the experiment belongs under */
        @JsonProperty("project_id")
        @ExcludeMissing
        fun projectId(projectId: JsonField<String>) = apply { this.projectId = projectId }

        /** Unique identifier for the experiment */
        fun experimentId(experimentId: String) = experimentId(JsonField.of(experimentId))

        /** Unique identifier for the experiment */
        @JsonProperty("experiment_id")
        @ExcludeMissing
        fun experimentId(experimentId: JsonField<String>) = apply {
            this.experimentId = experimentId
        }

        /**
         * The arguments that uniquely define a test case (an arbitrary, JSON serializable object).
         * Later on, Braintrust will use the `input` to know whether two test cases are the same
         * between experiments, so they should not contain experiment-specific state. A simple rule
         * of thumb is that if you run the same experiment twice, the `input` should be identical
         */
        @JsonProperty("input")
        @ExcludeMissing
        fun input(input: JsonValue) = apply { this.input = input }

        /**
         * The output of your application, including post-processing (an arbitrary, JSON
         * serializable object), that allows you to determine whether the result is correct or not.
         * For example, in an app that generates SQL queries, the `output` should be the _result_ of
         * the SQL query generated by the model, not the query itself, because there may be multiple
         * valid queries that answer a single question
         */
        @JsonProperty("output")
        @ExcludeMissing
        fun output(output: JsonValue) = apply { this.output = output }

        /**
         * The ground truth value (an arbitrary, JSON serializable object) that you'd compare to
         * `output` to determine if your `output` value is correct or not. Braintrust currently does
         * not compare `output` to `expected` for you, since there are so many different ways to do
         * that correctly. Instead, these values are just used to help you navigate your experiments
         * while digging into analyses. However, we may later use these values to re-score outputs
         * or fine-tune your models
         */
        @JsonProperty("expected")
        @ExcludeMissing
        fun expected(expected: JsonValue) = apply { this.expected = expected }

        /** The error that occurred, if any. */
        @JsonProperty("error")
        @ExcludeMissing
        fun error(error: JsonValue) = apply { this.error = error }

        /**
         * A dictionary of numeric values (between 0 and 1) to log. The scores should give you a
         * variety of signals that help you determine how accurate the outputs are compared to what
         * you expect and diagnose failures. For example, a summarization app might have one score
         * that tells you how accurate the summary is, and another that measures the word similarity
         * between the generated and grouth truth summary. The word similarity score could help you
         * determine whether the summarization was covering similar concepts or not. You can use
         * these scores to help you sort, filter, and compare experiments
         */
        fun scores(scores: Scores) = scores(JsonField.of(scores))

        /**
         * A dictionary of numeric values (between 0 and 1) to log. The scores should give you a
         * variety of signals that help you determine how accurate the outputs are compared to what
         * you expect and diagnose failures. For example, a summarization app might have one score
         * that tells you how accurate the summary is, and another that measures the word similarity
         * between the generated and grouth truth summary. The word similarity score could help you
         * determine whether the summarization was covering similar concepts or not. You can use
         * these scores to help you sort, filter, and compare experiments
         */
        @JsonProperty("scores")
        @ExcludeMissing
        fun scores(scores: JsonField<Scores>) = apply { this.scores = scores }

        /**
         * A dictionary with additional data about the test example, model outputs, or just about
         * anything else that's relevant, that you can use to help find and analyze examples later.
         * For example, you could log the `prompt`, example's `id`, or anything else that would be
         * useful to slice/dice later. The values in `metadata` can be any JSON-serializable type,
         * but its keys must be strings
         */
        fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

        /**
         * A dictionary with additional data about the test example, model outputs, or just about
         * anything else that's relevant, that you can use to help find and analyze examples later.
         * For example, you could log the `prompt`, example's `id`, or anything else that would be
         * useful to slice/dice later. The values in `metadata` can be any JSON-serializable type,
         * but its keys must be strings
         */
        @JsonProperty("metadata")
        @ExcludeMissing
        fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

        /** A list of tags to log */
        fun tags(tags: List<String>) = tags(JsonField.of(tags))

        /** A list of tags to log */
        @JsonProperty("tags")
        @ExcludeMissing
        fun tags(tags: JsonField<List<String>>) = apply { this.tags = tags }

        /**
         * Metrics are numerical measurements tracking the execution of the code that produced the
         * experiment event. Use "start" and "end" to track the time span over which the experiment
         * event was produced
         */
        fun metrics(metrics: Metrics) = metrics(JsonField.of(metrics))

        /**
         * Metrics are numerical measurements tracking the execution of the code that produced the
         * experiment event. Use "start" and "end" to track the time span over which the experiment
         * event was produced
         */
        @JsonProperty("metrics")
        @ExcludeMissing
        fun metrics(metrics: JsonField<Metrics>) = apply { this.metrics = metrics }

        /**
         * Context is additional information about the code that produced the experiment event. It
         * is essentially the textual counterpart to `metrics`. Use the `caller_*` attributes to
         * track the location in code which produced the experiment event
         */
        fun context(context: Context) = context(JsonField.of(context))

        /**
         * Context is additional information about the code that produced the experiment event. It
         * is essentially the textual counterpart to `metrics`. Use the `caller_*` attributes to
         * track the location in code which produced the experiment event
         */
        @JsonProperty("context")
        @ExcludeMissing
        fun context(context: JsonField<Context>) = apply { this.context = context }

        /**
         * A unique identifier used to link different experiment events together as part of a full
         * trace. See the [tracing guide](https://www.braintrust.dev/docs/guides/tracing) for full
         * details on tracing
         */
        fun spanId(spanId: String) = spanId(JsonField.of(spanId))

        /**
         * A unique identifier used to link different experiment events together as part of a full
         * trace. See the [tracing guide](https://www.braintrust.dev/docs/guides/tracing) for full
         * details on tracing
         */
        @JsonProperty("span_id")
        @ExcludeMissing
        fun spanId(spanId: JsonField<String>) = apply { this.spanId = spanId }

        /**
         * An array of the parent `span_ids` of this experiment event. This should be empty for the
         * root span of a trace, and should most often contain just one parent element for subspans
         */
        fun spanParents(spanParents: List<String>) = spanParents(JsonField.of(spanParents))

        /**
         * An array of the parent `span_ids` of this experiment event. This should be empty for the
         * root span of a trace, and should most often contain just one parent element for subspans
         */
        @JsonProperty("span_parents")
        @ExcludeMissing
        fun spanParents(spanParents: JsonField<List<String>>) = apply {
            this.spanParents = spanParents
        }

        /** A unique identifier for the trace this experiment event belongs to */
        fun rootSpanId(rootSpanId: String) = rootSpanId(JsonField.of(rootSpanId))

        /** A unique identifier for the trace this experiment event belongs to */
        @JsonProperty("root_span_id")
        @ExcludeMissing
        fun rootSpanId(rootSpanId: JsonField<String>) = apply { this.rootSpanId = rootSpanId }

        /** Human-identifying attributes of the span, such as name, type, etc. */
        fun spanAttributes(spanAttributes: SpanAttributes) =
            spanAttributes(JsonField.of(spanAttributes))

        /** Human-identifying attributes of the span, such as name, type, etc. */
        @JsonProperty("span_attributes")
        @ExcludeMissing
        fun spanAttributes(spanAttributes: JsonField<SpanAttributes>) = apply {
            this.spanAttributes = spanAttributes
        }

        /** Whether this span is a root span */
        fun isRoot(isRoot: Boolean) = isRoot(JsonField.of(isRoot))

        /** Whether this span is a root span */
        @JsonProperty("is_root")
        @ExcludeMissing
        fun isRoot(isRoot: JsonField<Boolean>) = apply { this.isRoot = isRoot }

        /** Indicates the event was copied from another object. */
        fun origin(origin: Origin) = origin(JsonField.of(origin))

        /** Indicates the event was copied from another object. */
        @JsonProperty("origin")
        @ExcludeMissing
        fun origin(origin: JsonField<Origin>) = apply { this.origin = origin }

        fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.clear()
            this.additionalProperties.putAll(additionalProperties)
        }

        @JsonAnySetter
        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
            this.additionalProperties.put(key, value)
        }

        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.putAll(additionalProperties)
        }

        fun build(): ExperimentEvent =
            ExperimentEvent(
                id,
                datasetRecordId,
                _xactId,
                created,
                projectId,
                experimentId,
                input,
                output,
                expected,
                error,
                scores,
                metadata,
                tags.map { it.toImmutable() },
                metrics,
                context,
                spanId,
                spanParents.map { it.toImmutable() },
                rootSpanId,
                spanAttributes,
                isRoot,
                origin,
                additionalProperties.toImmutable(),
            )
    }

    /**
     * Context is additional information about the code that produced the experiment event. It is
     * essentially the textual counterpart to `metrics`. Use the `caller_*` attributes to track the
     * location in code which produced the experiment event
     */
    @JsonDeserialize(builder = Context.Builder::class)
    @NoAutoDetect
    class Context
    private constructor(
        private val callerFunctionname: JsonField<String>,
        private val callerFilename: JsonField<String>,
        private val callerLineno: JsonField<Long>,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        private var validated: Boolean = false

        /** The function in code which created the experiment event */
        fun callerFunctionname(): Optional<String> =
            Optional.ofNullable(callerFunctionname.getNullable("caller_functionname"))

        /** Name of the file in code where the experiment event was created */
        fun callerFilename(): Optional<String> =
            Optional.ofNullable(callerFilename.getNullable("caller_filename"))

        /** Line of code where the experiment event was created */
        fun callerLineno(): Optional<Long> =
            Optional.ofNullable(callerLineno.getNullable("caller_lineno"))

        /** The function in code which created the experiment event */
        @JsonProperty("caller_functionname")
        @ExcludeMissing
        fun _callerFunctionname() = callerFunctionname

        /** Name of the file in code where the experiment event was created */
        @JsonProperty("caller_filename") @ExcludeMissing fun _callerFilename() = callerFilename

        /** Line of code where the experiment event was created */
        @JsonProperty("caller_lineno") @ExcludeMissing fun _callerLineno() = callerLineno

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun validate(): Context = apply {
            if (!validated) {
                callerFunctionname()
                callerFilename()
                callerLineno()
                validated = true
            }
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var callerFunctionname: JsonField<String> = JsonMissing.of()
            private var callerFilename: JsonField<String> = JsonMissing.of()
            private var callerLineno: JsonField<Long> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(context: Context) = apply {
                this.callerFunctionname = context.callerFunctionname
                this.callerFilename = context.callerFilename
                this.callerLineno = context.callerLineno
                additionalProperties(context.additionalProperties)
            }

            /** The function in code which created the experiment event */
            fun callerFunctionname(callerFunctionname: String) =
                callerFunctionname(JsonField.of(callerFunctionname))

            /** The function in code which created the experiment event */
            @JsonProperty("caller_functionname")
            @ExcludeMissing
            fun callerFunctionname(callerFunctionname: JsonField<String>) = apply {
                this.callerFunctionname = callerFunctionname
            }

            /** Name of the file in code where the experiment event was created */
            fun callerFilename(callerFilename: String) =
                callerFilename(JsonField.of(callerFilename))

            /** Name of the file in code where the experiment event was created */
            @JsonProperty("caller_filename")
            @ExcludeMissing
            fun callerFilename(callerFilename: JsonField<String>) = apply {
                this.callerFilename = callerFilename
            }

            /** Line of code where the experiment event was created */
            fun callerLineno(callerLineno: Long) = callerLineno(JsonField.of(callerLineno))

            /** Line of code where the experiment event was created */
            @JsonProperty("caller_lineno")
            @ExcludeMissing
            fun callerLineno(callerLineno: JsonField<Long>) = apply {
                this.callerLineno = callerLineno
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): Context =
                Context(
                    callerFunctionname,
                    callerFilename,
                    callerLineno,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Context && callerFunctionname == other.callerFunctionname && callerFilename == other.callerFilename && callerLineno == other.callerLineno && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(callerFunctionname, callerFilename, callerLineno, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Context{callerFunctionname=$callerFunctionname, callerFilename=$callerFilename, callerLineno=$callerLineno, additionalProperties=$additionalProperties}"
    }

    /**
     * A dictionary with additional data about the test example, model outputs, or just about
     * anything else that's relevant, that you can use to help find and analyze examples later. For
     * example, you could log the `prompt`, example's `id`, or anything else that would be useful to
     * slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys
     * must be strings
     */
    @JsonDeserialize(builder = Metadata.Builder::class)
    @NoAutoDetect
    class Metadata
    private constructor(
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        private var validated: Boolean = false

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun validate(): Metadata = apply {
            if (!validated) {
                validated = true
            }
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(metadata: Metadata) = apply {
                additionalProperties(metadata.additionalProperties)
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): Metadata = Metadata(additionalProperties.toImmutable())
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
    }

    /**
     * Metrics are numerical measurements tracking the execution of the code that produced the
     * experiment event. Use "start" and "end" to track the time span over which the experiment
     * event was produced
     */
    @JsonDeserialize(builder = Metrics.Builder::class)
    @NoAutoDetect
    class Metrics
    private constructor(
        private val start: JsonField<Double>,
        private val end: JsonField<Double>,
        private val promptTokens: JsonField<Long>,
        private val completionTokens: JsonField<Long>,
        private val tokens: JsonField<Long>,
        private val callerFunctionname: JsonValue,
        private val callerFilename: JsonValue,
        private val callerLineno: JsonValue,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        private var validated: Boolean = false

        /**
         * A unix timestamp recording when the section of code which produced the experiment event
         * started
         */
        fun start(): Optional<Double> = Optional.ofNullable(start.getNullable("start"))

        /**
         * A unix timestamp recording when the section of code which produced the experiment event
         * finished
         */
        fun end(): Optional<Double> = Optional.ofNullable(end.getNullable("end"))

        /**
         * The number of tokens in the prompt used to generate the experiment event (only set if
         * this is an LLM span)
         */
        fun promptTokens(): Optional<Long> =
            Optional.ofNullable(promptTokens.getNullable("prompt_tokens"))

        /**
         * The number of tokens in the completion generated by the model (only set if this is an LLM
         * span)
         */
        fun completionTokens(): Optional<Long> =
            Optional.ofNullable(completionTokens.getNullable("completion_tokens"))

        /** The total number of tokens in the input and output of the experiment event. */
        fun tokens(): Optional<Long> = Optional.ofNullable(tokens.getNullable("tokens"))

        /** This metric is deprecated */
        fun callerFunctionname(): JsonValue = callerFunctionname

        /** This metric is deprecated */
        fun callerFilename(): JsonValue = callerFilename

        /** This metric is deprecated */
        fun callerLineno(): JsonValue = callerLineno

        /**
         * A unix timestamp recording when the section of code which produced the experiment event
         * started
         */
        @JsonProperty("start") @ExcludeMissing fun _start() = start

        /**
         * A unix timestamp recording when the section of code which produced the experiment event
         * finished
         */
        @JsonProperty("end") @ExcludeMissing fun _end() = end

        /**
         * The number of tokens in the prompt used to generate the experiment event (only set if
         * this is an LLM span)
         */
        @JsonProperty("prompt_tokens") @ExcludeMissing fun _promptTokens() = promptTokens

        /**
         * The number of tokens in the completion generated by the model (only set if this is an LLM
         * span)
         */
        @JsonProperty("completion_tokens")
        @ExcludeMissing
        fun _completionTokens() = completionTokens

        /** The total number of tokens in the input and output of the experiment event. */
        @JsonProperty("tokens") @ExcludeMissing fun _tokens() = tokens

        /** This metric is deprecated */
        @JsonProperty("caller_functionname")
        @ExcludeMissing
        fun _callerFunctionname() = callerFunctionname

        /** This metric is deprecated */
        @JsonProperty("caller_filename") @ExcludeMissing fun _callerFilename() = callerFilename

        /** This metric is deprecated */
        @JsonProperty("caller_lineno") @ExcludeMissing fun _callerLineno() = callerLineno

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun validate(): Metrics = apply {
            if (!validated) {
                start()
                end()
                promptTokens()
                completionTokens()
                tokens()
                callerFunctionname()
                callerFilename()
                callerLineno()
                validated = true
            }
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var start: JsonField<Double> = JsonMissing.of()
            private var end: JsonField<Double> = JsonMissing.of()
            private var promptTokens: JsonField<Long> = JsonMissing.of()
            private var completionTokens: JsonField<Long> = JsonMissing.of()
            private var tokens: JsonField<Long> = JsonMissing.of()
            private var callerFunctionname: JsonValue = JsonMissing.of()
            private var callerFilename: JsonValue = JsonMissing.of()
            private var callerLineno: JsonValue = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(metrics: Metrics) = apply {
                this.start = metrics.start
                this.end = metrics.end
                this.promptTokens = metrics.promptTokens
                this.completionTokens = metrics.completionTokens
                this.tokens = metrics.tokens
                this.callerFunctionname = metrics.callerFunctionname
                this.callerFilename = metrics.callerFilename
                this.callerLineno = metrics.callerLineno
                additionalProperties(metrics.additionalProperties)
            }

            /**
             * A unix timestamp recording when the section of code which produced the experiment
             * event started
             */
            fun start(start: Double) = start(JsonField.of(start))

            /**
             * A unix timestamp recording when the section of code which produced the experiment
             * event started
             */
            @JsonProperty("start")
            @ExcludeMissing
            fun start(start: JsonField<Double>) = apply { this.start = start }

            /**
             * A unix timestamp recording when the section of code which produced the experiment
             * event finished
             */
            fun end(end: Double) = end(JsonField.of(end))

            /**
             * A unix timestamp recording when the section of code which produced the experiment
             * event finished
             */
            @JsonProperty("end")
            @ExcludeMissing
            fun end(end: JsonField<Double>) = apply { this.end = end }

            /**
             * The number of tokens in the prompt used to generate the experiment event (only set if
             * this is an LLM span)
             */
            fun promptTokens(promptTokens: Long) = promptTokens(JsonField.of(promptTokens))

            /**
             * The number of tokens in the prompt used to generate the experiment event (only set if
             * this is an LLM span)
             */
            @JsonProperty("prompt_tokens")
            @ExcludeMissing
            fun promptTokens(promptTokens: JsonField<Long>) = apply {
                this.promptTokens = promptTokens
            }

            /**
             * The number of tokens in the completion generated by the model (only set if this is an
             * LLM span)
             */
            fun completionTokens(completionTokens: Long) =
                completionTokens(JsonField.of(completionTokens))

            /**
             * The number of tokens in the completion generated by the model (only set if this is an
             * LLM span)
             */
            @JsonProperty("completion_tokens")
            @ExcludeMissing
            fun completionTokens(completionTokens: JsonField<Long>) = apply {
                this.completionTokens = completionTokens
            }

            /** The total number of tokens in the input and output of the experiment event. */
            fun tokens(tokens: Long) = tokens(JsonField.of(tokens))

            /** The total number of tokens in the input and output of the experiment event. */
            @JsonProperty("tokens")
            @ExcludeMissing
            fun tokens(tokens: JsonField<Long>) = apply { this.tokens = tokens }

            /** This metric is deprecated */
            @JsonProperty("caller_functionname")
            @ExcludeMissing
            fun callerFunctionname(callerFunctionname: JsonValue) = apply {
                this.callerFunctionname = callerFunctionname
            }

            /** This metric is deprecated */
            @JsonProperty("caller_filename")
            @ExcludeMissing
            fun callerFilename(callerFilename: JsonValue) = apply {
                this.callerFilename = callerFilename
            }

            /** This metric is deprecated */
            @JsonProperty("caller_lineno")
            @ExcludeMissing
            fun callerLineno(callerLineno: JsonValue) = apply { this.callerLineno = callerLineno }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): Metrics =
                Metrics(
                    start,
                    end,
                    promptTokens,
                    completionTokens,
                    tokens,
                    callerFunctionname,
                    callerFilename,
                    callerLineno,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Metrics && start == other.start && end == other.end && promptTokens == other.promptTokens && completionTokens == other.completionTokens && tokens == other.tokens && callerFunctionname == other.callerFunctionname && callerFilename == other.callerFilename && callerLineno == other.callerLineno && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(start, end, promptTokens, completionTokens, tokens, callerFunctionname, callerFilename, callerLineno, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Metrics{start=$start, end=$end, promptTokens=$promptTokens, completionTokens=$completionTokens, tokens=$tokens, callerFunctionname=$callerFunctionname, callerFilename=$callerFilename, callerLineno=$callerLineno, additionalProperties=$additionalProperties}"
    }

    /** Indicates the event was copied from another object. */
    @JsonDeserialize(builder = Origin.Builder::class)
    @NoAutoDetect
    class Origin
    private constructor(
        private val objectType: JsonField<ObjectType>,
        private val objectId: JsonField<String>,
        private val id: JsonField<String>,
        private val _xactId: JsonField<String>,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        private var validated: Boolean = false

        /** Type of the object the event is originating from. */
        fun objectType(): ObjectType = objectType.getRequired("object_type")

        /** ID of the object the event is originating from. */
        fun objectId(): String = objectId.getRequired("object_id")

        /** ID of the original event. */
        fun id(): String = id.getRequired("id")

        /** Transaction ID of the original event. */
        fun _xactId(): String = _xactId.getRequired("_xact_id")

        /** Type of the object the event is originating from. */
        @JsonProperty("object_type") @ExcludeMissing fun _objectType() = objectType

        /** ID of the object the event is originating from. */
        @JsonProperty("object_id") @ExcludeMissing fun _objectId() = objectId

        /** ID of the original event. */
        @JsonProperty("id") @ExcludeMissing fun _id() = id

        /** Transaction ID of the original event. */
        @JsonProperty("_xact_id") @ExcludeMissing fun __xactId() = _xactId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun validate(): Origin = apply {
            if (!validated) {
                objectType()
                objectId()
                id()
                _xactId()
                validated = true
            }
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var objectType: JsonField<ObjectType> = JsonMissing.of()
            private var objectId: JsonField<String> = JsonMissing.of()
            private var id: JsonField<String> = JsonMissing.of()
            private var _xactId: JsonField<String> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(origin: Origin) = apply {
                this.objectType = origin.objectType
                this.objectId = origin.objectId
                this.id = origin.id
                this._xactId = origin._xactId
                additionalProperties(origin.additionalProperties)
            }

            /** Type of the object the event is originating from. */
            fun objectType(objectType: ObjectType) = objectType(JsonField.of(objectType))

            /** Type of the object the event is originating from. */
            @JsonProperty("object_type")
            @ExcludeMissing
            fun objectType(objectType: JsonField<ObjectType>) = apply {
                this.objectType = objectType
            }

            /** ID of the object the event is originating from. */
            fun objectId(objectId: String) = objectId(JsonField.of(objectId))

            /** ID of the object the event is originating from. */
            @JsonProperty("object_id")
            @ExcludeMissing
            fun objectId(objectId: JsonField<String>) = apply { this.objectId = objectId }

            /** ID of the original event. */
            fun id(id: String) = id(JsonField.of(id))

            /** ID of the original event. */
            @JsonProperty("id")
            @ExcludeMissing
            fun id(id: JsonField<String>) = apply { this.id = id }

            /** Transaction ID of the original event. */
            fun _xactId(_xactId: String) = _xactId(JsonField.of(_xactId))

            /** Transaction ID of the original event. */
            @JsonProperty("_xact_id")
            @ExcludeMissing
            fun _xactId(_xactId: JsonField<String>) = apply { this._xactId = _xactId }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): Origin =
                Origin(
                    objectType,
                    objectId,
                    id,
                    _xactId,
                    additionalProperties.toImmutable(),
                )
        }

        class ObjectType
        @JsonCreator
        private constructor(
            private val value: JsonField<String>,
        ) : Enum {

            @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is ObjectType && value == other.value /* spotless:on */
            }

            override fun hashCode() = value.hashCode()

            override fun toString() = value.toString()

            companion object {

                @JvmField val EXPERIMENT = ObjectType(JsonField.of("experiment"))

                @JvmField val DATASET = ObjectType(JsonField.of("dataset"))

                @JvmField val PROMPT = ObjectType(JsonField.of("prompt"))

                @JvmField val FUNCTION = ObjectType(JsonField.of("function"))

                @JvmField val PROMPT_SESSION = ObjectType(JsonField.of("prompt_session"))

                @JvmField val PROJECT_LOGS = ObjectType(JsonField.of("project_logs"))

                @JvmStatic fun of(value: String) = ObjectType(JsonField.of(value))
            }

            enum class Known {
                EXPERIMENT,
                DATASET,
                PROMPT,
                FUNCTION,
                PROMPT_SESSION,
                PROJECT_LOGS,
            }

            enum class Value {
                EXPERIMENT,
                DATASET,
                PROMPT,
                FUNCTION,
                PROMPT_SESSION,
                PROJECT_LOGS,
                _UNKNOWN,
            }

            fun value(): Value =
                when (this) {
                    EXPERIMENT -> Value.EXPERIMENT
                    DATASET -> Value.DATASET
                    PROMPT -> Value.PROMPT
                    FUNCTION -> Value.FUNCTION
                    PROMPT_SESSION -> Value.PROMPT_SESSION
                    PROJECT_LOGS -> Value.PROJECT_LOGS
                    else -> Value._UNKNOWN
                }

            fun known(): Known =
                when (this) {
                    EXPERIMENT -> Known.EXPERIMENT
                    DATASET -> Known.DATASET
                    PROMPT -> Known.PROMPT
                    FUNCTION -> Known.FUNCTION
                    PROMPT_SESSION -> Known.PROMPT_SESSION
                    PROJECT_LOGS -> Known.PROJECT_LOGS
                    else -> throw BraintrustInvalidDataException("Unknown ObjectType: $value")
                }

            fun asString(): String = _value().asStringOrThrow()
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Origin && objectType == other.objectType && objectId == other.objectId && id == other.id && _xactId == other._xactId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(objectType, objectId, id, _xactId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Origin{objectType=$objectType, objectId=$objectId, id=$id, _xactId=$_xactId, additionalProperties=$additionalProperties}"
    }

    /**
     * A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety
     * of signals that help you determine how accurate the outputs are compared to what you expect
     * and diagnose failures. For example, a summarization app might have one score that tells you
     * how accurate the summary is, and another that measures the word similarity between the
     * generated and grouth truth summary. The word similarity score could help you determine
     * whether the summarization was covering similar concepts or not. You can use these scores to
     * help you sort, filter, and compare experiments
     */
    @JsonDeserialize(builder = Scores.Builder::class)
    @NoAutoDetect
    class Scores
    private constructor(
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        private var validated: Boolean = false

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun validate(): Scores = apply {
            if (!validated) {
                validated = true
            }
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(scores: Scores) = apply {
                additionalProperties(scores.additionalProperties)
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): Scores = Scores(additionalProperties.toImmutable())
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Scores && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Scores{additionalProperties=$additionalProperties}"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is ExperimentEvent && id == other.id && datasetRecordId == other.datasetRecordId && _xactId == other._xactId && created == other.created && projectId == other.projectId && experimentId == other.experimentId && input == other.input && output == other.output && expected == other.expected && error == other.error && scores == other.scores && metadata == other.metadata && tags == other.tags && metrics == other.metrics && context == other.context && spanId == other.spanId && spanParents == other.spanParents && rootSpanId == other.rootSpanId && spanAttributes == other.spanAttributes && isRoot == other.isRoot && origin == other.origin && additionalProperties == other.additionalProperties /* spotless:on */
    }

    /* spotless:off */
    private val hashCode: Int by lazy { Objects.hash(id, datasetRecordId, _xactId, created, projectId, experimentId, input, output, expected, error, scores, metadata, tags, metrics, context, spanId, spanParents, rootSpanId, spanAttributes, isRoot, origin, additionalProperties) }
    /* spotless:on */

    override fun hashCode(): Int = hashCode

    override fun toString() =
        "ExperimentEvent{id=$id, datasetRecordId=$datasetRecordId, _xactId=$_xactId, created=$created, projectId=$projectId, experimentId=$experimentId, input=$input, output=$output, expected=$expected, error=$error, scores=$scores, metadata=$metadata, tags=$tags, metrics=$metrics, context=$context, spanId=$spanId, spanParents=$spanParents, rootSpanId=$rootSpanId, spanAttributes=$spanAttributes, isRoot=$isRoot, origin=$origin, additionalProperties=$additionalProperties}"
}
